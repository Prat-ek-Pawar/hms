# Generated by Django 4.2.7 on 2025-05-24 03:44

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_id', models.CharField(editable=False, help_text='Auto-generated unique patient ID', max_length=20, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(max_length=100)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('date_of_birth', models.DateField()),
                ('age', models.PositiveIntegerField(editable=False)),
                ('mobile_primary', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', 'Enter a valid phone number')])),
                ('mobile_secondary', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', 'Enter a valid phone number')])),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('address_line1', models.CharField(max_length=200)),
                ('address_line2', models.CharField(blank=True, max_length=200, null=True)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('country', models.CharField(default='India', max_length=100)),
                ('pincode', models.CharField(max_length=10)),
                ('blood_group', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=5, null=True)),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='Height in cm', max_digits=5, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=5, null=True)),
                ('bmi', models.DecimalField(blank=True, decimal_places=2, editable=False, help_text='Auto-calculated BMI', max_digits=4, null=True)),
                ('marital_status', models.CharField(choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], default='single', max_length=20)),
                ('occupation', models.CharField(blank=True, max_length=100, null=True)),
                ('education', models.CharField(blank=True, max_length=100, null=True)),
                ('religion', models.CharField(blank=True, max_length=50, null=True)),
                ('nationality', models.CharField(default='Indian', max_length=50)),
                ('languages_spoken', models.CharField(blank=True, help_text='Comma-separated languages', max_length=500, null=True)),
                ('emergency_contact_name', models.CharField(max_length=100)),
                ('emergency_contact_relation', models.CharField(max_length=50)),
                ('emergency_contact_phone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', 'Enter a valid phone number')])),
                ('emergency_contact_address', models.TextField(blank=True, null=True)),
                ('allergies_summary', models.TextField(blank=True, help_text='Known allergies summary', null=True)),
                ('chronic_conditions', models.TextField(blank=True, help_text='Chronic medical conditions', null=True)),
                ('medications_summary', models.TextField(blank=True, help_text='Current medications summary', null=True)),
                ('past_surgeries', models.TextField(blank=True, help_text='Past surgical history', null=True)),
                ('family_history', models.TextField(blank=True, help_text='Family medical history', null=True)),
                ('insurance_provider', models.CharField(blank=True, max_length=200, null=True)),
                ('insurance_policy_number', models.CharField(blank=True, max_length=100, null=True)),
                ('insurance_expiry_date', models.DateField(blank=True, null=True)),
                ('patient_type', models.CharField(choices=[('inpatient', 'Inpatient'), ('outpatient', 'Outpatient'), ('emergency', 'Emergency')], default='outpatient', max_length=20)),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('last_visit_date', models.DateTimeField(blank=True, null=True)),
                ('total_visits', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('deceased', 'Deceased'), ('transferred', 'Transferred')], default='active', max_length=20)),
                ('general_notes', models.TextField(blank=True, help_text='General notes about patient', null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='patients/profiles/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_patients', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patient_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'patients',
                'ordering': ['-registration_date'],
            },
        ),
        migrations.CreateModel(
            name='PatientVitals',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recorded_date', models.DateTimeField(auto_now_add=True)),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text='Temperature in Celsius', max_digits=4, null=True)),
                ('blood_pressure_systolic', models.PositiveIntegerField(blank=True, null=True)),
                ('blood_pressure_diastolic', models.PositiveIntegerField(blank=True, null=True)),
                ('heart_rate', models.PositiveIntegerField(blank=True, help_text='Beats per minute', null=True)),
                ('respiratory_rate', models.PositiveIntegerField(blank=True, help_text='Breaths per minute', null=True)),
                ('oxygen_saturation', models.DecimalField(blank=True, decimal_places=2, help_text='SpO2 percentage', max_digits=5, null=True)),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='Height in cm', max_digits=5, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=5, null=True)),
                ('bmi', models.DecimalField(blank=True, decimal_places=2, editable=False, max_digits=4, null=True)),
                ('blood_glucose', models.DecimalField(blank=True, decimal_places=2, help_text='Blood glucose level', max_digits=5, null=True)),
                ('pain_scale', models.PositiveIntegerField(blank=True, help_text='Pain scale 0-10', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True, help_text='Additional notes about vitals', null=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vitals', to='patients.patient')),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'patient_vitals',
                'ordering': ['-recorded_date'],
            },
        ),
        migrations.CreateModel(
            name='PatientNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note_type', models.CharField(choices=[('general', 'General Note'), ('clinical', 'Clinical Note'), ('nursing', 'Nursing Note'), ('progress', 'Progress Note'), ('discharge', 'Discharge Note'), ('follow_up', 'Follow-up Note')], default='general', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_confidential', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clinical_notes', to='patients.patient')),
            ],
            options={
                'db_table': 'patient_notes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PatientMedication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medication_name', models.CharField(max_length=200)),
                ('dosage', models.CharField(help_text='e.g., 500mg, 2 tablets', max_length=100)),
                ('frequency', models.CharField(help_text='e.g., Twice daily, Every 8 hours', max_length=100)),
                ('route', models.CharField(help_text='e.g., Oral, IV, IM', max_length=50)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('discontinued', 'Discontinued'), ('completed', 'Completed'), ('on_hold', 'On Hold')], default='active', max_length=20)),
                ('prescribed_by', models.CharField(help_text='Prescribing doctor', max_length=200)),
                ('purpose', models.CharField(help_text='Purpose/condition for medication', max_length=200)),
                ('instructions', models.TextField(blank=True, help_text='Special instructions', null=True)),
                ('side_effects', models.TextField(blank=True, help_text='Observed side effects', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medication_list', to='patients.patient')),
            ],
            options={
                'db_table': 'patient_medications',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='PatientInsurance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider_name', models.CharField(max_length=200)),
                ('policy_number', models.CharField(max_length=100, unique=True)),
                ('policy_type', models.CharField(help_text='e.g., Health, Life, Accident', max_length=100)),
                ('coverage_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('premium_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('start_date', models.DateField()),
                ('expiry_date', models.DateField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('expired', 'Expired'), ('suspended', 'Suspended'), ('cancelled', 'Cancelled')], default='active', max_length=20)),
                ('covered_treatments', models.TextField(blank=True, help_text='List of covered treatments', null=True)),
                ('excluded_treatments', models.TextField(blank=True, help_text='List of excluded treatments', null=True)),
                ('policy_document', models.FileField(blank=True, null=True, upload_to='patients/insurance/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='insurance_policies', to='patients.patient')),
            ],
            options={
                'db_table': 'patient_insurance',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='PatientDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('id_proof', 'ID Proof'), ('address_proof', 'Address Proof'), ('insurance', 'Insurance Document'), ('medical_report', 'Medical Report'), ('prescription', 'Prescription'), ('lab_report', 'Lab Report'), ('xray', 'X-Ray'), ('scan', 'CT/MRI Scan'), ('discharge_summary', 'Discharge Summary'), ('other', 'Other')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('document_file', models.FileField(upload_to='patients/documents/')),
                ('document_date', models.DateField(default=datetime.date.today)),
                ('is_sensitive', models.BooleanField(default=False, help_text='Sensitive medical information')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='patients.patient')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'patient_documents',
                'ordering': ['-document_date'],
            },
        ),
        migrations.CreateModel(
            name='PatientAllergy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allergy_type', models.CharField(choices=[('drug', 'Drug/Medication'), ('food', 'Food'), ('environmental', 'Environmental'), ('contact', 'Contact'), ('other', 'Other')], max_length=20)),
                ('allergen', models.CharField(help_text='Name of the allergen', max_length=200)),
                ('severity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('life_threatening', 'Life Threatening')], max_length=20)),
                ('symptoms', models.TextField(help_text='Allergic reaction symptoms')),
                ('treatment', models.TextField(blank=True, help_text='Treatment for allergic reaction', null=True)),
                ('onset_date', models.DateField(blank=True, help_text='When allergy was first discovered', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allergy_details', to='patients.patient')),
            ],
            options={
                'db_table': 'patient_allergies',
                'ordering': ['-severity', 'allergen'],
                'unique_together': {('patient', 'allergen')},
            },
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['patient_id'], name='patients_patient_e63b14_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['mobile_primary'], name='patients_mobile__23087b_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['last_name', 'first_name'], name='patients_last_na_ce6411_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['city', 'state'], name='patients_city_305b1f_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['status'], name='patients_status_7c14f6_idx'),
        ),
    ]
